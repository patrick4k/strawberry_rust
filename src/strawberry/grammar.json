{
  "lexer_rules": [
    {
      "name": "comment",
      "method": "Ignore",
      "pattern": "(//.*|/\\*.*?\\*/)"
    },
    {
      "name": "string",
      "method": "Capture(1)",
      "pattern": "\"(.*)\""
    },
    {
      "name": "digit",
      "method": "RegexMatch",
      "pattern": "\\d"
    },
    {
      "name": "int",
      "method": "RegexMatch",
      "pattern": "$digit+"
    },
    {
      "name": "letter",
      "method": "RegexMatch",
      "pattern": "[a-zA-Z]"
    },
    {
      "name": "double",
      "method": "RegexMatch",
      "pattern": "-?$int?\\.$int"
    },
    {
      "name": "scientific notation",
      "method": "RegexMatch",
      "pattern": "($double|$int)[eE][+-]?$int"
    },
    {
      "name": "identifier",
      "method": "RegexMatch",
      "pattern": "$letter($letter|$digit|_)*"
    },
    {
      "name": "default",
        "method": "RegexMatch",
        "pattern": "_$identifier?"
    },
    {
      "name": "whitespace",
      "method": "Ignore",
      "pattern": "\\s+"
    },
    {
      "name": "newline",
      "method": "Ignore",
      "pattern": "[\\n|\\r]+"
    },
    {
      "name": "equals",
      "method": "Match",
      "pattern": "="
    },
    {
      "name": "semicolon",
      "method": "Match",
      "pattern": ";"
    },
    {
      "name": "comma",
      "method": "Match",
      "pattern": ","
    },
    {
      "name": "regex",
      "method": "Capture(1)",
      "pattern": "r$string"
    },
    {
      "name": "backslash",
      "method": "Match",
      "pattern": "\\\\"
    },
    {
      "name": "forwardslash",
      "method": "Match",
      "pattern": "/"
    }
  ],
  "parser_rules": [
    {
      "name": "expression",
      "pattern": "double"
    },
    {
      "name": "assign",
      "pattern": "identifier . equals . expression"
    },
    {
      "name": "statement",
      "pattern": "assign . semicolon"
    },
    {
    "name": "program",
    "pattern": "statement*"
    }
  ]
}
