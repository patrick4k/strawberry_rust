Beginning tokenizing stream: 
----------------------------------------------------------------------------

let a = "my new string";
let b = a;

----------------------------------------------------------------------------


Ignored: 2 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
let a = "my new string";
let b = a;

----------------------------------------------------------------------------


Matched: 'let' to identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
 a = "my new string";
let b = a;

----------------------------------------------------------------------------


Ignored: 1 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
a = "my new string";
let b = a;

----------------------------------------------------------------------------


Matched: 'a' to identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
 = "my new string";
let b = a;

----------------------------------------------------------------------------


Ignored: 1 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
= "my new string";
let b = a;

----------------------------------------------------------------------------


Matched: '='
Substream ------------------------------------------------------------------
 "my new string";
let b = a;

----------------------------------------------------------------------------


Ignored: 1 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
"my new string";
let b = a;

----------------------------------------------------------------------------


Matched: 'my new string' to string = '^"(.*)"'
Substream ------------------------------------------------------------------
;
let b = a;

----------------------------------------------------------------------------


Matched: ';'
Substream ------------------------------------------------------------------

let b = a;

----------------------------------------------------------------------------


Ignored: 2 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
let b = a;

----------------------------------------------------------------------------


Matched: 'let' to identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
 b = a;

----------------------------------------------------------------------------


Ignored: 1 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
b = a;

----------------------------------------------------------------------------


Matched: 'b' to identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
 = a;

----------------------------------------------------------------------------


Ignored: 1 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
= a;

----------------------------------------------------------------------------


Matched: '='
Substream ------------------------------------------------------------------
 a;

----------------------------------------------------------------------------


Ignored: 1 chars to whitespace = '^\s+'
Substream ------------------------------------------------------------------
a;

----------------------------------------------------------------------------


Matched: 'a' to identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
;

----------------------------------------------------------------------------


Matched: ';'
Substream ------------------------------------------------------------------


----------------------------------------------------------------------------


Ignored: 2 chars to whitespace = '^\s+'
Reached end of stream

Lexer finished successfully,
Printing tokens:

>> let
>> a
>> =
>> my new string
>> ;
>> let
>> b
>> =
>> a
>> ;
