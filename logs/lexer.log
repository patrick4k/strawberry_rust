Beginning tokenizing stream: 
----------------------------------------------------------------------------

let a = r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 2 chars to Newline = '^[\n\r]+'
Substream ------------------------------------------------------------------
let a = r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: 'let' to Identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
 a = r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 1 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
a = r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: 'a' to Identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
 = r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 1 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
= r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: '=' to Assignment
Substream ------------------------------------------------------------------
 r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 1 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
r"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: 'r' to Identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
"my new string";


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: 'my new string' to String = '^"(.*)"'
Substream ------------------------------------------------------------------
;


foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: ';' to Semicolon
Substream ------------------------------------------------------------------



foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 6 chars to Newline = '^[\n\r]+'
Substream ------------------------------------------------------------------
foreach 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: 'foreach' to Identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
 9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 1 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
9 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: '9' to Int = '^(?:\d)+'
Substream ------------------------------------------------------------------
 << 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 1 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
<< 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: '<<' to ShiftLeft
Substream ------------------------------------------------------------------
 10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 1 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
10 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: '10' to Int = '^(?:\d)+'
Substream ------------------------------------------------------------------
 {
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 1 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
{
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: '{' to CurlyBracketOpen
Substream ------------------------------------------------------------------

    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 2 chars to Newline = '^[\n\r]+'
Substream ------------------------------------------------------------------
    println!("Hello, world!");
}
----------------------------------------------------------------------------


Ignored: 4 chars to Whitespace = '^\s+'
Substream ------------------------------------------------------------------
println!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: 'println' to Identifier = '^(?:[a-zA-Z])((?:[a-zA-Z])|(?:\d)|_)*'
Substream ------------------------------------------------------------------
!("Hello, world!");
}
----------------------------------------------------------------------------


Matched: '!' to Not
Substream ------------------------------------------------------------------
("Hello, world!");
}
----------------------------------------------------------------------------


Matched: '(' to ParenthesisOpen
Substream ------------------------------------------------------------------
"Hello, world!");
}
----------------------------------------------------------------------------


Matched: 'Hello, world!' to String = '^"(.*)"'
Substream ------------------------------------------------------------------
);
}
----------------------------------------------------------------------------


Matched: ')' to ParenthesisClose
Substream ------------------------------------------------------------------
;
}
----------------------------------------------------------------------------


Matched: ';' to Semicolon
Substream ------------------------------------------------------------------

}
----------------------------------------------------------------------------


Ignored: 2 chars to Newline = '^[\n\r]+'
Substream ------------------------------------------------------------------
}
----------------------------------------------------------------------------


Matched: '}' to CurlyBracketClose
Reached end of stream

Lexer finished successfully,

